Fix
utf-8 encoding > setting in pycharm aanpassen: UTF-8 + BOM aanzetten voor windows
Geldige relatie lijst refactor naar isinstance met inheritance ipv alle relaties en testen: https://stackoverflow.com/questions/31488362/why-is-dict-faster-than-if-else-in-python/31488416
Clear other props van Dtu naar set waarde verhuizen en checken op owner.Field
convert type nakijken en unittests schrijven
deployment/packaging: https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/
requirements > rdflib voor lezen ttl bestanden, PyVis voor visualiser en Python 3.10
Loggers > python native logging
OEF model: HS heeft een getal vooraan in een eigenschap > getallen omzetten naar letterwoorden
GA: WKT string heeft een spatie voor eerste '('
Oef loc implementeren 

Write clean code
Defaultdict: dict met default value, dict group
Unpacking sequences
Gebruik classes met parameter namen
Docstrings van https://betterprogramming.pub/the-guide-to-python-docstrings-3d40340e824b
Custom errors
return types


NewFeatures
OTL versie verwerken in logging createmodel
Dependencies resolven: pip install -r requirements.txt https://stackoverflow.com/questions/6590688/is-it-bad-to-have-my-virtualenv-directory-inside-my-git-repository
> pip freeze > python -m pip install -r requirements.txt
relatieCreator => gebruikt relatieValidator en _validatie methode op objecten zelf om te verifiëren of een relatie mag gelegd worden. Houdt geen rekening met bestaande relaties
OTL model creator houdt geen rekening met bestaande classes en datatypes (deze moeten gewist worden indien niet meer in de OTL)
Create_model(pure=False): pure maakt een model zonder toevoegingen zoals relatieInteractor en otlobject
Asset Factory: create similar relations from asset
Store: assets opslaan in Store waar je gemakkelijk kan zoeken op id of comb van naam en type. Maakt ook mogelijk om te controleren op ids of dubbele relaties
Automatisch temp id's genereren voor assets waar die niet is ingevuld (alleen nuttig indien via Factory aangemaakt, de gebruiker moet de ids kunnen vinden om bv relaties te leggen
AnyURIField implementeren met validatie voor zover dat mogelijk is
Postenmapping:
- van post automatisch asset maken met ingevulde waardes
- van ingevulde asset uitzoeken welke post of posten dit is
Docstring appenden vanuit otlobject met generieke functies zoals attr_info
Import eminfra voor asset relaties etc: alternatief voor data afladen in Davie
zoeken voor naam/label naar typeuri: opslaan in dict als lower() > ClassLijst
DAVIE integratie: https://apps-dev.mow.vlaanderen.be/davie-core/swagger-webjars/swagger-ui/3.52.3/index.html?url=/davie-core/swagger-assets/swagger.yml
- Aanmaken aanlevering
- bestand toevoegen aan de aanlevering
- aanlevering finaliseren

Demo
Via console? Vermijd de nood voor imports
Enkel facility importeren
Creëer object via uri of naam
Vul asset info, met juiste en foute waardes
Vraag attribuut informatie op
Ander gebruik: normalisatie script
Abstracte class instantiëren


DemoInfo
use case: migratietraject met testdata ondersteunen
> allerlei features toegevoegd, zoals import, validatie, helper functies etc.
Ooit vertrokken van meest simpele model, maar heeft geen inheritance metadata op types en attrs en heeft geen validatie.
Dotnotatie bevatte waarde om validatie af te dwingen, nu enkel bij kwantwrd en dte
Voordeel echte overerving: filter assets op abstract type, filter relatie van assets
Dynamic typing voor union types
Davie kan geen lege waardes verwerken. Is ook gevaarlijk. Mss aparte endpoint of metadata die aanduidt dat iets leeg mag
alpha release nu
beta release wanneer de lijst van bugfixes leeg is
full release wanneer? business bepaalt: lijst van features zijn genummerd, doorgeven welke essentieel zijn


Use cases
Normalisatie
Migratie
Testen nieuwe otl versies
Davie api? Shpfiles maken van alle types? 


Facility
* Design
    - OTLModelCreator => creates OTL model
* ImportAndStore
* Store(Storage) = dicts (by type) in 1 dict for assets > create class to hold dict + operations
  + 1 dict to hold all assets (search by id)
    - StoreSearcher => return instance(s)
    - UpdateStore
    - CreateInStore => return instance with createdId
    - RemoveFromStore
* Factory
    - CreateAssetsInBulk => return list of instances
    - CreateRelations
* QualityControl
* Export
    - memory (Dicts)
    - Different formats
        - json
        - csv per type


Building and Packaging:
.\venv2\Scripts\python.exe -m build --wheel
-or-
.\venv2\Scripts\flit init
.\venv2\Scripts\flit build
Dist
twine
.\venv2\Scripts\python.exe -m twine check dist/*
