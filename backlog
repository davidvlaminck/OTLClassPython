relaties leggen: validatie op classes zelf is moeilijk maar kan mits extra methode aanroepen
relaties leggen: mogelijk maken om te leggen vanuit doel of bron of valideren
relatieCreator => gebruikt relatieValidator en _validatie methode op objecten zelf om te verifiÃ«ren of een relatie mag gelegd worden. Houdt geen rekening met bestaande relaties


TODO's:
OTL model houdt geen rekening met bestaande classes en datatypes (deze moeten gewist worden indien niet meer in de OTL)
Asset Factory: vervangt classloader
  - create_asset_from_typURI
  - copy_values_from_asset_to_asset met **args
  - combinatie
  - gebruikt mss dot notatie  of letterlijk lezen van attributen
    - copy waardes door fields te shallow copy'en
  - create similar relations from asset
deprecated classes implementeren => evt warning geven bij gebruik
storage (in memory)
tempId's vs bestaande id's
agents kunnen niet zelf aangemaakt worden
AnyURI implementeren
utf-8 encoding > setting in pycharm aanpassen + UTF-8 + BOM aanzetten voor windows
Agent - Keuring ondersteuning > Worden niet correct gegenereerd
hoe libraries gemakkelijk importeren?
geometrie artefact gebruiken om WKT strings inhoudelijk te checken
herbekijken ttl bestanden inlezen, zie voorbeeld onderaan backlog
postenmapping: implementatie in beide richtingen: van mapping naar assets en omgekeerd
. Get_attributes() om door atrrivuten te lopen. Dict
Docstring appenden vanuit otlbject met gnerieke functies
KwantWrd met readonly doen > setter weglaten 
Alle tests laten passen met 1 script
Lie demo via console? 

To check:
Agent
Keuring
Proef
Sokkel (dtc ontbreekt)
Signalisatie (abstract zonder attributen)
query'en welke concrete classes NIET overerven van AIMObject > RelatieInteractor en OTL Asset toevoegen aan die assets
AIMObject, Seinlantaarn > encoding probleem > voorlopige oplossing ==> # coding=utf-8



Facility
* Design
    - OTLModelCreator => creates OTL model
* ImportAndStore
* Store(Storage) = dicts (by type) in 1 dict for assets > create class to hold dict + operations
  + 1 dict to hold all assets (search by id)
    - StoreSearcher => return instance(s)
    - UpdateStore
    - CreateInStore => return instance with createdId
    - RemoveFromStore
* Factory
    - CreateAssetsInBulk => return list of instances
    - CreateRelations
* QualityControl
* Export
    - memory (Dicts)
    - Different formats
        - json
        - csv per type
