attributen:
name
label
definition
uri
kard. min-max + type > definieert field
overerving
constraints
readonly
usagenote
deprecatedversion

type: > OTLField
name
uri
usagenote
definition
label
deprecatedversion
> codelist voor keuzelijsten

relatie:
bron
doel
uri
richting
usagenote
deprecatedversion

relaties leggen: validatie op classes zelf is moeilijk maar kan mits extra methode aanroepen
relaties leggen: mogelijk maken om te leggen vanuit doel of bron


> relatieObject implementeren
> AnyURI implementeren

> uri implementeren op alle soorten attributen

ophalen attributen
select * from OSLOClass
left join OSLOAttributen on OSLOClass.uri = OSLOAttributen.class_uri
left join TypeLinkTabel tlt on tlt.item_uri = OSLOAttributen."type"
left join OSLODatatypePrimitive op on OSLOAttributen.'type' = op.uri
where OSLOClass.uri = 'https://wegenenverkeer.data.vlaanderen.be/ns/onderdeel#DNBLaagspanning';



overerving tussen classes
storage (in memory)
tempId's vs bestaande id's
agents kunnen niet zelf aangemaakt worden
deprecated classes geven een warning
deprecated attributen? door overerving aan te passen?


Facility
* Design
    - OTLModelCreator => creates OTL model
* ImportAndStore
* Store(Storage) = dicts (by type) in 1 dict for assets > create class to hold dict + operations
  + 1 dict to hold all assets (search by id)
    - StoreSearcher => return instance(s)
    - UpdateStore
    - CreateInStore => return instance with createdId
    - RemoveFromStore
* Factory
    - CreateAssetsInBulk => return list of instances
    - CreateRelations
* QualityControl
* Export
    - memory (Dicts)
    - Different formats
        - josn https://janakiev.com/blog/python-pickle-json/
        - csv per type
