relaties leggen: validatie op classes zelf is moeilijk maar kan mits extra methode aanroepen
relaties leggen: mogelijk maken om te leggen vanuit doel of bron of valideren
relatieCreator => gebruikt relatieValidator en _validatie methode op objecten zelf om te verifiÃ«ren of een relatie mag gelegd worden. Houdt geen rekening met bestaande relaties


TODO's:
storage (in memory)
tempId's vs bestaande id's
agents kunnen niet zelf aangemaakt worden
deprecated classes geven een warning
deprecated attributen? door overerving aan te passen?
AnyURI implementeren
utf-8 encoding > setting in pycharm aanpassen + UTF-8 + BOM aanzetten voor windows
Agent - Keuring ondersteuning > Worden niet correct gegenereerd
hoe libraries gemakkelijk importeren?
geometrie artefact gebruiken om WKT strings inhoudelijk te checken
herbekijken ttl bestanden inlezen, zie voorbeeld onderaan backlog


To check:
Agent
Keuring
Sokkel (dtc ontbreekt)
Signalisatie (abstract zonder attributen)
AIMObject TypeURI override
RelatieObject TypeURI override
==> query'en welke concrete classes NIET overerven van AIMObject > RelatieInteractor en OTL Asset toevoegen aan die assets

OTLPrimitiveDatatypeCreator probleem met getFieldFromTypeUri oplossen
AIMObject, Seinlantaarn > encoding probleem > voorlopige oplossing ==> # coding=utf-8

AIMObject RelatieObject heeft een fix gekregen voor typeURI, maar Agent en ProefEnMeting en andere soorten classes nog niet
testen schrijven voor bestaande fixes


Facility
* Design
    - OTLModelCreator => creates OTL model
* ImportAndStore
* Store(Storage) = dicts (by type) in 1 dict for assets > create class to hold dict + operations
  + 1 dict to hold all assets (search by id)
    - StoreSearcher => return instance(s)
    - UpdateStore
    - CreateInStore => return instance with createdId
    - RemoveFromStore
* Factory
    - CreateAssetsInBulk => return list of instances
    - CreateRelations
* QualityControl
* Export
    - memory (Dicts)
    - Different formats
        - json
        - csv per type



voorbeeldcode Ruben inlezen ttl bestanden:

def keuzelijst_item_uit_ttl(keuzelijstnaam):
    """keuzelijstopties uit ttl op github halen"""
    # create a Graph
    g = rdflib.Graph()
    keuzelijstlink = "https://raw.githubusercontent.com/Informatievlaanderen/OSLOthema-wegenenverkeer/master/codelijsten/"+keuzelijstnaam+".ttl"

    # parse in turtle file hosted on the Internet
    result = g.parse(keuzelijstlink, format="turtle")

    # loop through each triple in the graph (subj, pred, obj)
    lijst_keuze_opties = []
    for subj, pred, obj in g:
        # check if there is at least one triple in the Graph
        if (subj, pred, obj) not in g:
            raise Exception("It better be!")
        if str(subj) not in lijst_keuze_opties:
            if str(subj).startswith("https://wegenenverkeer.data.vlaanderen.be/id/concept/"):
                lijst_keuze_opties.append(str(subj))

        if len(lijst_keuze_opties) == 0:
            keuzelijstoptie = '-'
        else:
            keuzelijstoptie = random.choice(lijst_keuze_opties)
            keuzelijstoptie = keuzelijstoptie.split('/')[-1]

    return keuzelijstoptie